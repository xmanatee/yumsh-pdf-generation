<?php

/**
 * @file
 * A module for querying a YuMSh olympiad results.
 */

define('OLYMP_RESULTS_MIN_YEAR_DEFAULT', 2007);
define('OLYMP_RESULTS_MAX_YEAR_DEFAULT', 2012);
define('OLYMP_RESULTS_MIN_PARAL', 4);
define('OLYMP_RESULTS_MAX_PARAL', 11);
define('OLYMP_RESULTS_SECRET_QUERY_LIMIT', 200);

define('OLYMP_RESULTS_FORM_PAGE', 'ol-query');
define('OLYMP_RESULTS_RESULTS_PAGE', 'ol-results');
define('OLYMP_RESULTS_LOADER_PAGE', 'olymp-results-load');
define('OLYMP_RESULTS_SECRET_QUERY_PAGE', 'olymp-results-query-restricted');
define('OLYMP_RESULTS_SECRET_RESULTS_PAGE', 'olymp-results-results-restricted');
define('OLYMP_RESULTS_SECRET_EDIT_PAGE', 'olymp-results-edit-restricted');

/**
 * Implementation of hook_menu().
 * Registers URLs in Drupal.
 */
function olymp_results_menu() {
    $items = array();
    $items[OLYMP_RESULTS_FORM_PAGE] = array (
        'title' => 'Результаты олимпиады ЮМШ',
        'description' => 'Форма выдачи результатов олимпиады ЮМШ',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('olymp_results_query_form'),
        'access arguments' => array('access olymp_results query form'),
        'type' => MENU_CALLBACK
    );
    $items[OLYMP_RESULTS_RESULTS_PAGE] = array (
        'title' => 'Результаты олимпиады ЮМШ',
        'description' => 'Форма выдачи результатов олимпиады ЮМШ',
        'page callback' => 'olymp_results_page',
        'access arguments' => array('access olymp_results query form'),
        'type' => MENU_CALLBACK
    );
    $items['admin/config/content/olymp_results'] = array (
        'title' => 'Результаты олимпиады ЮМШ',
        'description' => 'Настройки страницы запроса результатов олимпиады ЮМШ.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('olymp_results_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM
    );
    $items[OLYMP_RESULTS_LOADER_PAGE] = array (
    	'title' => 'Загрузка результатов олимпиады ЮМШ',
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('olymp_results_loader_form'),
    	'access arguments' => array('load olympiad results'),
    	'type' => MENU_NORMAL_ITEM
    );
    $items[OLYMP_RESULTS_SECRET_QUERY_PAGE] = array (
        'title' => 'Редактирование результатов олимпиады ЮМШ',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('olymp_results_secret_query_form'),
        'access arguments' => array('edit olympiad results'),
        'type' => MENU_NORMAL_ITEM
    );
    $items[OLYMP_RESULTS_SECRET_RESULTS_PAGE] = array (
        'title' => 'Результаты олимпиады ЮМШ',
        'page callback' => 'olymp_results_secret_page',
        'access arguments' => array('edit olympiad results'),
        'type' => MENU_CALLBACK
    );
    $items[OLYMP_RESULTS_SECRET_EDIT_PAGE] = array (
        'title' => 'Редактирование результатов олимпиады ЮМШ',
        'page callback' => 'olymp_results_secret_edit_page',
        'access arguments' => array('edit olympiad results'),
        'type' => MENU_CALLBACK
    );
    
    return $items;
}

function olymp_results_permission() {
    return array (
        'access olymp_results query form' => array (
            'title' => 'Доступ к форме выдачи результатов олимпиады ЮМШ.'
        ),
        'load olympiad results' => array (
            'title' => 'Загрузка результатов олимпиады'
        ),
        'edit olympiad results' => array (
            'title' => 'Просмотр и редактирование результатов олимпиады. '
                       . 'Внимание: пользователь, обладающий этим правом, может просматривать таблицу результатов.'
        )
    );
}

/*
 * Converts string into some standard representation.
 */
function _olymp_results_normalize_string($str) {
    return trim($str);
}

### Query form ######################################################

/**
 * Describes fields in results query form.
 */
function olymp_results_query_form($form, &$form_state) {
    $min_year = (int) variable_get('olymp_results_min_year', OLYMP_RESULTS_MIN_YEAR_DEFAULT);
    $max_year = (int) variable_get('olymp_results_max_year', OLYMP_RESULTS_MAX_YEAR_DEFAULT);
    
    $form['update_date'] = array (
        '#type' => 'markup',
        '#markup' => 'Последнее обновление: ' . check_plain(variable_get('olymp_results_last_updated', 'никогда')) . '<br />'
                     . '<strong>Замечание:</strong> Буквы "е" и "ё" считаются различными.'
    );
    $form['name'] = array (
        '#type' => 'textfield',
        '#title' => 'Имя',
        '#required' => TRUE
    );
    $form['family_name'] = array (
        '#type' => 'textfield',
        '#title' => 'Фамилия',
        '#required' => TRUE
    );
    $form['paral'] = array (
        '#type' => 'select',
        '#title' => 'Параллель участия',
        '#options' => drupal_map_assoc(range(OLYMP_RESULTS_MIN_PARAL, OLYMP_RESULTS_MAX_PARAL)),
        '#description' => 'Параллель участия &mdash; это номер параллели, задачи которой Вы решали в работе. Если Вы решали условия для своего класса, то это просто номер вашего класса.',
        '#required' => TRUE
    );
    $form['school'] = array (
        '#type' => 'textfield',
        '#title' => 'Номер или название школы (необязательно)',
        '#required' => FALSE
    );
    $form['city'] = array (
        '#type' => 'textfield',
        '#title' => 'Город (оставьте пустым, если Санкт-Петербург)',
        '#required' => FALSE
    );
    $form['year'] = array (
        '#type' => 'select',
        '#title' => 'Год',
        '#options' => drupal_map_assoc(range($min_year, $max_year)),
        '#default_value' => $max_year,
        '#required' => TRUE
    );
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'Узнать результаты'
    );
    
    return $form;
}

function olymp_results_query_form_submit($form, &$form_state) {
    if (isset($_GET['destination'])) {
        unset($_GET['destination']);
    }

    $form_state['redirect'] = array (
        OLYMP_RESULTS_RESULTS_PAGE,
        array(
            'query' => array (
                'name' => $form_state['values']['name'],
                'family_name' => $form_state['values']['family_name'],
                'paral' => $form_state['values']['paral'],
                'school' => $form_state['values']['school'],
                'city' => $form_state['values']['city'],
                'year' => $form_state['values']['year'],
            )
        )
    );
}

### Olympiad results page ###########################################

function _olymp_results_get_info($name, $family_name, $paral, $school, $city, $year) {
    $result = array();
    
    $query_pupils = db_select('pupils', 'p');
    $query_pupils
        ->fields('p', array('id_pupil', 'name', 'family', 'paral', 'year', 'school_name', 'district', 'sum', 'result', 'seen'))
        ->where('LOWER(p.family) = LOWER(:family)', array('family' => $family_name))
        ->where('LOWER(p.name) = LOWER(:name)',   array('name' => $name))
        ->condition('p.paral',  $paral)
        ->condition('p.year',   $year);
    if(isset($school) and !empty($school)) {
        if($school == (String)((Integer)$school) and empty($city)) {
            # $school is a plain school number and $city is not set
            $query_pupils->condition('p.school_name', $school);
        }
        else {
			// TODO: Now, for example, the 1234 school in Moscow
			//       will be found if ($school == '12', $cite == 'Moscow').
			//       This cannot be fixed just by exact matching of
			//       numeric school names because in 2013-14 there are
			//       records such as (school_name = '1234, Moscow',
			//       district = 'Moscow').
            $query_pupils->where('LOWER(p.school_name) LIKE LOWER(:school)', array('school' => '%'.db_like($school).'%'));
        }
    }
    if(isset($city) and !empty($city)) {
		$query_pupils->where('LOWER(p.district) LIKE LOWER(:district)',  array('district' => '%'.db_like($city).'%'));
	}
    
    $query_pupils = $query_pupils->execute();
    
    $pupil = $query_pupils->fetch();
    
    if($pupil === false) {
        return false;
    }
    $id_pupil = $pupil->id_pupil;
    $result['family'] = $pupil->family;
    $result['name'] = $pupil->name;
    $result['paral'] = $pupil->paral;
    $result['year'] = $pupil->year;
    $result['sum'] = $pupil->sum;
    $result['result'] = $pupil->result;
    $result['school'] = $pupil->school_name;
    $result['district'] = $pupil->district;
    
    $result['only_one'] = ($query_pupils->fetch() === false);
    
    $query_marks = db_select('marks', 'm')
        ->fields('m', array('id_pupil', 'year', 'z_num', 'mark'))
        ->condition('m.id_pupil', $id_pupil)
        ->condition('m.year', $year)
        ->orderBy('m.z_num', 'ASC')
        ->execute();
    $marks = array();
    foreach($query_marks as $mark_res) {
        $marks[] = array($mark_res->z_num, $mark_res->mark);
    }
    $result['marks'] = $marks;
    
    if($result['only_one']) {
        db_update('pupils')
            ->fields(array('seen' => $pupil->seen + 1))
            ->condition('id_pupil', $id_pupil)
            ->condition('year', $year)
            ->execute();
    }
    
    return $result;
}

function olymp_results_page() {
    @$name = _olymp_results_normalize_string($_REQUEST['name']);
    @$family_name = _olymp_results_normalize_string($_REQUEST['family_name']);
    @$paral = _olymp_results_normalize_string($_REQUEST['paral']);
    @$school = _olymp_results_normalize_string($_REQUEST['school']);
    @$city = _olymp_results_normalize_string($_REQUEST['city']);
    @$year = _olymp_results_normalize_string($_REQUEST['year']);
    if( !isset($name) || empty($name) ||
        !isset($family_name) || empty($family_name) ||
        !isset($paral) || empty($paral) ||
        !isset($year) || empty($year))
    {
        if (isset($_GET['destination'])) {
            unset($_GET['destination']);
        }
        drupal_goto(OLYMP_RESULTS_FORM_PAGE);
    }
    
    if(!isset($school)) $school = '';
    if(!isset($city)) $city = '';

    $paral = (int) $paral;
    $year = (int) $year;
        
    $info = _olymp_results_get_info($name, $family_name, $paral, $school, $city, $year);
    
    if($info === false) {
        return 'Запись не найдена.<br />' . l('Попробуйте ещё раз.', OLYMP_RESULTS_FORM_PAGE);
    }
    
    $html = '';
    
    if(!$info['only_one']) {
        $html .= '<strong>ВНИМАНИЕ:</strong> Найдено несколько записей. Возможно, отображаемая ниже информация относится не к Вам!<br />' 
              . l('Попробуйте указать больше данных.', OLYMP_RESULTS_FORM_PAGE) . '<br />';
    }
    
    
    $comment = variable_get('olymp_results_comment', '');
    if(!empty($comment)) {
        $html .= '<p>' . check_plain($comment) . '</p>';
    }
    
    $html .= '<p>';
    $html .= '<strong>Имя:</strong> ' . check_plain($info['family']) . ' ' . check_plain($info['name']) . '<br />';
    $html .= '<strong>Параллель участия:</strong> ' . check_plain($info['paral']) . '<br />';
    if(isset($school) and !empty($school)) {
        $html .= '<strong>Школа:</strong> ' . check_plain($info['school']) . '<br />';
    }
    if(isset($city) and !empty($city)) {
		$html .= '<strong>Город/район:</strong> ' . check_plain($info['district']) . '<br />';
	}
    $html .= '<strong>Год:</strong> ' . check_plain($info['year']) . '<br />';
    $html .= '<strong>Сумма:</strong> ' . check_plain($info['sum']) . '<br />';
    $html .= '<strong>Решение жюри: ' . check_plain($info['result']) . '</strong><br />';
    $html .= '</p>';
    
    $html .= '<p><strong>Результаты по задачам</strong></p>';
    
    $html .= '<table><tr><th>Задача</th><th>Баллы</th></tr>';
    foreach($info['marks'] as $mark) {
        $html .= '<tr><td>' . check_plain($mark[0]) . '</td><td>' . check_plain($mark[1]) . '</td></tr>';
    }
    $html .= '</table>';
    
    return $html;
}


### Configuration form ##############################################

/**
 * Describes fields in configuration form.
 */
function olymp_results_config_form($form, &$form_state) {
    $form['olymp_results_min_year'] = array (
        '#type' => 'textfield',
        '#title' => 'Минимальный год',
        '#default_value' => variable_get('olymp_results_min_year', OLYMP_RESULTS_MIN_YEAR_DEFAULT),
        '#size' => 4,
        '#maxlength' => 4,
        '#description' => 'Минимальный год, который можно указать в форме выдачи результатов.',
        '#required' => TRUE
    );
    $form['olymp_results_max_year'] = array (
        '#type' => 'textfield',
        '#title' => 'Максимальный год',
        '#default_value' => variable_get('olymp_results_max_year', OLYMP_RESULTS_MAX_YEAR_DEFAULT),
        '#size' => 4,
        '#maxlength' => 4,
        '#description' => 'Максимальный год, который можно указать в форме выдачи результатов.',
        '#required' => TRUE
    );
    $form['olymp_results_comment'] = array (
        '#type' => 'textarea',
        '#title' => 'Комментарий на странице выдачи результатов.',
        '#default_value' => variable_get('olymp_results_comment', ''),
        '#rows' => 3,
        '#required' => FALSE
    );
    
    return system_settings_form($form);
}

/**
 * Validates configuration parameters.
 */
function olymp_results_config_form_validate($form, &$form_state) {
    $min_year = $form_state['values']['olymp_results_min_year'];
    $max_year = $form_state['values']['olymp_results_max_year'];
    
    if(!is_numeric($min_year)) {
        form_set_error('olymp_results_min_year', 'Нужно указать число.');
    }
    else if($min_year < 1900 or $min_year > 2100) {
        form_set_error('olymp_results_min_year', 'Укажите год между 1900 и 2100.');
    }
    
    if(!is_numeric($max_year)) {
        form_set_error('olymp_results_max_year', 'Нужно указать число.');
    }
    else if($max_year < 1900 or $max_year > 2100) {
        form_set_error('olymp_results_max_year', 'Укажите год между 1900 и 2100.');
    }
    
    if(is_numeric($min_year) and is_numeric($max_year) and $min_year > $max_year) {
        form_set_error('olymp_results_max_year', 'Максимальный год должен быть не меньше минимального года.');
    }
}


### Olympiad results loader form ####################################

function olymp_results_loader_form($form, &$form_state) {
    $min_year = variable_get('olymp_results_min_year', OLYMP_RESULTS_MIN_YEAR_DEFAULT);
    $max_year = variable_get('olymp_results_max_year', OLYMP_RESULTS_MAX_YEAR_DEFAULT);

    $form['olymp_results_loader_warning'] = array (
        '#type' => 'markup',
        '#markup' => '<strong>ВНИМАНИЕ:</strong> При загрузке результатов <strong>все</strong> результаты данного года будут перезаписаны!'
    );
    $form['olymp_results_loader_year'] = array (
        '#type' => 'select',
        '#title' => 'Год',
        '#description' => 'Если нужный год не указан в списке, укажите правильный диаппазон в настройках (необходимы права администратора)',
        '#options' => drupal_map_assoc(range($min_year, $max_year)),
        '#required' => TRUE    
    );
    $form['olymp_results_loader_marks'] = array (
        '#type' => 'file',
        '#title' => 'Сгенерированный файл marks.csv',
        '#required' => FALSE
    );
    $form['olymp_results_loader_pupils'] = array (
        '#type' => 'file',
        '#title' => 'Сгенерированный файл pupils.csv',
        '#required' => FALSE
    );
    $form['olymp_results_loader_submit'] = array (
        '#type' => 'submit',
        '#value' => 'Загрузить'
    );
    return $form;
}

function olymp_results_loader_form_validate($form, &$form_state) {
    $pupils_csv = file_save_upload('olymp_results_loader_pupils', array(
        'file_validate_extensions' => array('csv')
    ));
    if($pupils_csv) {
        $form_state['storage']['pupils_csv'] = $pupils_csv;
    }
    else {
        form_set_error('olymp_results_loader_pupils',
            'Укажите файл с расширением .csv'
        );
        return;
    }
    
    $marks_csv = file_save_upload('olymp_results_loader_marks', array(
        'file_validate_extensions' => array('csv')
    ));
    if($marks_csv) {
        $form_state['storage']['marks_csv'] = $marks_csv;
    }
    else {
        form_set_error('olymp_results_loader_marks',
            'Укажите файл с расширением .csv'
        );
        unset($form_state['storage']['pupils_csv']);
        file_delete($pupils_csv);
        return;
    }
}

function olymp_results_loader_form_submit($form, &$form_state) {
    $pupils_csv = $form_state['storage']['pupils_csv'];
    unset($form_state['storage']['pupils_csv']);
    $marks_csv = $form_state['storage']['marks_csv'];
    unset($form_state['storage']['marks_csv']);
    
    $year = $form_state['values']['olymp_results_loader_year'];
    
    if (isset($_GET['destination'])) {
        unset($_GET['destination']);
    }

    $form_state['redirect'] = array(
        OLYMP_RESULTS_FORM_PAGE
    );
    
    $txn = db_transaction();
    try {
        db_delete('marks')
            ->condition('year', $year)
            ->execute();
        db_delete('pupils')
            ->condition('year', $year)
            ->execute();
        
        $pupil_count = 0;
        $mark_count = 0;
        
        $pupils_inserter = db_insert('pupils')
            ->fields(array('id_pupil', 'family' , 'name', 'paral', 'school_name', 'district', 'sum', 'result', 'year'));
        if(($f = fopen($pupils_csv->uri, 'r')) !== FALSE) {
            while(($row = fgetcsv($f)) !== FALSE) {
                if($row === NULL) continue;
                if(sizeof($row) != 8) {
                    throw new Exception('Неправильное количество значений в строке ' . ($pupil_count + 1) . ' файла pupils.csv!');
                }
                for($i = 0; $i < sizeof($row); $i++) {
                    $row[$i] = _olymp_results_normalize_string($row[$i]);
                }
                $row[] = $year;
                $pupils_inserter->values($row);
                $pupil_count++;
                if($pupil_count % 1000 == 0) {
                    $pupils_inserter->execute();
                    $pupils_inserter = db_insert('pupils')
                        ->fields(array('id_pupil', 'family' , 'name', 'paral', 'school_name', 'district', 'sum', 'result', 'year'));
                }
            }
            fclose($f);
        }
        $pupils_inserter->execute();
        
        
        $marks_inserter = db_insert('marks')
            ->fields(array('id_pupil', 'z_num', 'mark', 'year'));
        if(($f = fopen($marks_csv->uri, 'r')) !== FALSE) {
            while(($row = fgetcsv($f)) !== FALSE) {
                if($row === NULL) continue;
                if(sizeof($row) != 3) {
                    throw new Exception('Неправильное количество значений в строке ' . ($marks_count + 1) . ' файла marks.csv!');
                }
                $row[1] = _olymp_results_normalize_string($row[1]);
                $row[] = $year;
                $marks_inserter->values($row);
                $mark_count++;
                if($mark_count % 1000 == 0) {
                    $marks_inserter->execute();
                    $marks_inserter = db_insert('marks')
                        ->fields(array('id_pupil', 'z_num', 'mark', 'year'));
                }
            }
            fclose($f);
        }
        $marks_inserter->execute();
        
        drupal_set_message('Результаты загружены: ' . $pupil_count . ' участников, ' . $mark_count . ' оценок.');
        variable_set('olymp_results_last_updated', date('jS F Y H:i'));    
    }
    catch (Exception $e) {
        $txn->rollback();
        drupal_set_message('При обновлении произошла ошибка: ' . $e->getMessage(), 'error');
        $form_state['redirect'] = array (
            OLYMP_RESULTS_LOADER_PAGE
        );
    } 
    
    file_delete($pupils_csv);
    file_delete($marks_csv);
}


### Edit form, etc. #################################################

function olymp_results_secret_query_form($form, &$form_state) {
    $min_year = (int) variable_get('olymp_results_min_year', OLYMP_RESULTS_MIN_YEAR_DEFAULT);
    $max_year = (int) variable_get('olymp_results_max_year', OLYMP_RESULTS_MAX_YEAR_DEFAULT);
    
    $form['notes'] = array (
        '#type' => 'markup',
        '#markup' => 'Все поля обязательны для заполнения, однако Вы можете использовать специальные символы: '
                     . '<strong>%</strong> заменяет 0 или более произвольных букв, '
                     . '<strong>_</strong> заменяет одну букву.<br />'
                     . '<strong>Замечание:</strong> Буквы "е" и "ё" считаются различными.'
    );
    $form['name'] = array (
        '#type' => 'textfield',
        '#title' => 'Имя',
        '#default_value' => '%',
        '#required' => TRUE
    );
    $form['family_name'] = array (
        '#type' => 'textfield',
        '#title' => 'Фамилия',
        '#default_value' => '%',
        '#required' => TRUE
    );
    $form['paral'] = array (
        '#type' => 'select',
        '#title' => 'Параллель участия',
        '#options' => array('any' => 'Любая') + drupal_map_assoc(range(OLYMP_RESULTS_MIN_PARAL, OLYMP_RESULTS_MAX_PARAL)),
        '#default_value' => 'any',
        '#required' => TRUE
    );
    $form['school'] = array (
        '#type' => 'textfield',
        '#title' => 'Школа',
        '#default_value' => '%',
        '#required' => TRUE
    );
    $form['district'] = array (
		'#type' => 'textfield',
		'#title' => 'Район',
		'#default_value' => '%',
		'#required' => TRUE
    );
    $form['year'] = array (
        '#type' => 'select',
        '#title' => 'Год',
        '#options' => drupal_map_assoc(range($min_year, $max_year)),
        '#default_value' => $max_year,
        '#required' => TRUE
    );
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'Показать список'
    );
    
    return $form;
}

function olymp_results_secret_query_form_submit($form, &$form_state) {
    if (isset($_GET['destination'])) {
        unset($_GET['destination']);
    }

    $form_state['redirect'] = array(
        OLYMP_RESULTS_SECRET_RESULTS_PAGE,
        array(
            'query' => array(
                'name' => $form_state['values']['name'],
                'family_name' => $form_state['values']['family_name'],
                'paral' => $form_state['values']['paral'],
                'school' => $form_state['values']['school'],
                'district' => $form_state['values']['district'],
                'year' => $form_state['values']['year'],
            )
        )
    );

}

function olymp_results_secret_page() {
    @$name = _olymp_results_normalize_string($_REQUEST['name']);
    @$family_name = _olymp_results_normalize_string($_REQUEST['family_name']);
    @$paral = _olymp_results_normalize_string($_REQUEST['paral']);
    @$school = _olymp_results_normalize_string($_REQUEST['school']);
    @$district = _olymp_results_normalize_string($_REQUEST['district']);
    @$year = _olymp_results_normalize_string($_REQUEST['year']);
    if( !isset($name) || empty($name) ||
        !isset($family_name) || empty($family_name) ||
        !isset($paral) || empty($paral) ||
        !isset($school) || empty($school) ||
        !isset($district) || empty($district) ||
        !isset($year) || empty($year))
    {
        if (isset($_GET['destination'])) {
            unset($_GET['destination']);
        }
        drupal_goto(OLYMP_RESULTS_FORM_PAGE);
    }
    
    if($paral == 'any') {
        unset($paral);
    }
    else {
        $paral = (int) $paral;
    }
    $year = (int) $year;
    
    $pupils_query = db_select('pupils', 'p')
        ->fields('p', array('id_pupil', 'name', 'family', 'school_name', 'district', 'paral', 'sum', 'result', 'seen'))
        ->where('LOWER(p.family) LIKE LOWER(:family)', array('family' => $family_name))
        ->where('LOWER(p.name) LIKE LOWER(:name)',   array('name' => $name));
    if(isset($paral)) {
        $pupils_query = $pupils_query->condition('p.paral',  $paral);
    }
    $pupils_query = $pupils_query
        ->condition('p.year',   $year)
        ->where('LOWER(p.school_name) LIKE LOWER(:school)', array('school' => $school))
        ->where('LOWER(p.district) LIKE LOWER(:district)', array('district' => $district))
        ->range(0, OLYMP_RESULTS_SECRET_QUERY_LIMIT)
        ->execute();
    
    $html = 'Год: ' . check_plain($year) . '<br />';
    $html .= 'Показаны первые ' . OLYMP_RESULTS_SECRET_QUERY_LIMIT . ' записей.<br />';
    $html .= '<table><tr><th>Имя</th><th>Фамилия</th><th>Район</th><th>Школа</th><th>Параллель</th><th>Сумма</th><th>Результат</th><th>Просмотрено</th><th></th></tr>';
    foreach($pupils_query as $p) {
        $html .= '<tr><td>' . check_plain($p->name) . '</td>'
                   . '<td>' . check_plain($p->family) . '</td>'
                   . '<td>' . check_plain($p->district) . '</td>'
                   . '<td>' . check_plain($p->school_name) . '</td>'
                   . '<td>' . check_plain($p->paral) . '</td>'
                   . '<td>' . check_plain($p->sum) . '</td>'
                   . '<td>' . check_plain($p->result) . '</td>'
                   . '<td>' . check_plain($p->seen) . '</td>'
                   . '<td>' . l('Редактировать', OLYMP_RESULTS_SECRET_EDIT_PAGE . '/' . $year . '/' .$p->id_pupil) . '</td></tr>';
    }
    $html .= '</table>';
    
    return $html;
}

function olymp_results_secret_edit_page($year, $id) {
    return drupal_get_form('olymp_results_secret_edit_form', $year, $id);
}

function olymp_results_secret_edit_form($form, &$form_state, $year, $id) {
    if(!isset($year) || !is_numeric($year) || !isset($id) || !is_numeric($id)) {
        if (isset($_GET['destination'])) {
            unset($_GET['destination']);
        }
        drupal_goto(OLYMP_RESULTS_SECRET_QUERY_PAGE);
        return;
    }
    
    $p = db_select('pupils', 'p')
        ->fields('p', array('name', 'family', 'school_name', 'district', 'paral', 'sum', 'result', 'seen'))
        ->condition('p.id_pupil', $id)
        ->condition('p.year', $year)
        ->execute()
        ->fetch();
    
    if($p === false) {
        if (isset($_GET['destination'])) {
            unset($_GET['destination']);
        }
        drupal_set_message('Был указан неизвестный идентификатор.', 'error');
        drupal_goto(OLYMP_RESULTS_SECRET_QUERY_PAGE);
        return;
    }
    
    $form_state['storage']['year'] = $year;
    $form_state['storage']['id'] = $id;
    $form['notes'] = array (
        '#type' => 'markup',
        '#markup' => 'Введите новые значения.'
    );
    $form['name'] = array (
        '#type' => 'textfield',
        '#title' => 'Имя',
        '#default_value' => $p->name,
        '#required' => TRUE
    );
    $form['family'] = array (
        '#type' => 'textfield',
        '#title' => 'Фамилия',
        '#default_value' => $p->family,
        '#required' => TRUE
    );
    $form['district'] = array (
		'#type' => 'textfield',
		'#title' => 'Район',
		'#default_value' => $p->district,
		'#required' => TRUE
    );
    $form['school'] = array (
        '#type' => 'textfield',
        '#title' => 'Школа (название или номер)',
        '#default_value' => $p->school_name,
        '#required' => TRUE
    );
    $form['paral'] = array (
		'#type' => 'select',
        '#title' => 'Параллель участия',
        '#options' => drupal_map_assoc(range(OLYMP_RESULTS_MIN_PARAL, OLYMP_RESULTS_MAX_PARAL)),
        '#default_value' => $p->paral,
        '#required' => TRUE
    );
    $form['sum'] = array (
        '#type' => 'textfield',
        '#title' => 'Сумма',
        '#default_value' => $p->sum,
        '#required' => FALSE
    );
    $form['result'] = array (
        '#type' => 'textfield',
        '#title' => 'Решение жюри',
        '#default_value' => $p->result,
        '#required' => FALSE
    );
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'Обновить запись'
    );
    
    return $form;
}

function olymp_results_secret_edit_form_submit($form, &$form_state) {
    $txn = db_transaction();
    try {
        db_update('pupils')
            ->fields(array(
                'name' => $form_state['values']['name'],
                'family' => $form_state['values']['family'],
                'school_name' => $form_state['values']['school'],
                'district' => $form_state['values']['district'],
                'paral' => $form_state['values']['paral'],
                'sum' => $form_state['values']['sum'],
                'result' => $form_state['values']['result']
            ))
            ->condition('id_pupil', $form_state['storage']['id'])
            ->condition('year', $form_state['storage']['year'])
            ->execute();
            drupal_set_message('Запись обновлена.');
    }
    catch (Exception $e) {
        $txn->rollback();
        drupal_set_message('При обновлении произошла ошибка: ' . $e->getMessage(), 'error');
        if (isset($_GET['destination'])) {
            unset($_GET['destination']);
        }
        $form_state['redirect'] = array(
            OLYMP_RESULTS_SECRET_QUERY_PAGE
        );
    }
}




